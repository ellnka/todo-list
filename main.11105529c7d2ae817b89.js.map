{"version":3,"sources":["webpack:///./helpers/index.js","webpack:///./task/index.js","webpack:///./task/template.js","webpack:///./task-list/index.js","webpack:///./task-list/template.js","webpack:///./menu/index.js","webpack:///./menu/template.js","webpack:///./todos/index.js","webpack:///./index.js"],"names":["Helpers","generateId","Math","random","toString","substr","createElementFromHTML","htmlString","div","document","createElement","innerHTML","trim","firstChild","CLASSES","Task","id","text","isCompleted","this","init","renderTask","_elem","querySelector","addEventListener","clickCompleteTask","bind","clickRemoveTask","_id","elem","dispatchEvent","CustomEvent","detail","getData","_text","_isCompleted","value","checked","TaskList","render","restoredTasks","JSON","parse","window","localStorage","getItem","tasks","map","taskData","filter","_taskListElem","renderTasks","reRenderTasks","task","forEach","appendChild","completeTask","removeTask","addTaskToList","push","saveTaskInLocalStorage","taskListElem","getUncompletedCount","length","getAllTasks","event","setAllUncompleted","setItem","stringify","Menu","taskList","_taskList","completedTasksChanged","querySelectorAll","buttonElem","filterTasks","clearCompleted","button","target","closest","classList","contains","remove","add","resetFilter","_listWrapperElem","_listNewTaskElem","_changeThemeElem","newTaskOnInput","changeThemeOnClick","_menu","keyCode","blur","body","toggle"],"mappings":"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","file":"main.11105529c7d2ae817b89.js","sourcesContent":["export default class Helpers {\r\n    static generateId() {\r\n        return Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    static createElementFromHTML(htmlString) {\r\n        var div = document.createElement('div');\r\n        div.innerHTML = htmlString.trim();\r\n\r\n        return div.firstChild; \r\n    }\r\n}","import Helpers from '../helpers';\r\nimport template from './template';\r\n\r\nconst CLASSES = {\r\n    check: '.task__check',\r\n    label: '.task__label',\r\n    remove: '.task__remove-btn'\r\n};\r\n\r\nexport default class Task {\r\n    constructor({id, text, isCompleted}) {\r\n        this.init(id, text, isCompleted);\r\n\r\n        this.renderTask();\r\n        this._elem.querySelector(CLASSES.check).addEventListener('change', this.clickCompleteTask.bind(this));\r\n        this._elem.querySelector(CLASSES.label).addEventListener('click', this.clickCompleteTask.bind(this)); \r\n        this._elem.querySelector(CLASSES.remove).addEventListener('click', this.clickRemoveTask.bind(this)); \r\n    }\r\n\r\n    init(id, text, isCompleted) {\r\n        this.text = text;\r\n        this.isCompleted = !!isCompleted;\r\n        this._id = id || Helpers.generateId();\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    \r\n    set text(value) {\r\n        if (!value) {\r\n          return;\r\n        }\r\n\r\n        this._text = value;\r\n    }\r\n\r\n    get isCompleted() {\r\n        return this._isCompleted;\r\n    }\r\n    \r\n    set isCompleted(value) {\r\n        this._isCompleted = value;\r\n        if (this._elem) {\r\n            this._elem.querySelector(CLASSES.check).checked = this.isCompleted;\r\n        }\r\n    }\r\n\r\n    get elem() {\r\n        return this._elem;\r\n    }\r\n\r\n    renderTask() {\r\n        this._elem = Helpers.createElementFromHTML(template(this._id, this.text, this.isCompleted));\r\n        //this._removeButton = removeTaskButton;\r\n    }\r\n\r\n    clickCompleteTask() {\r\n        this.isCompleted = !this.isCompleted;\r\n        this.elem.dispatchEvent(new CustomEvent(\"completed\"));\r\n    }\r\n\r\n    clickRemoveTask() {\r\n        this.elem.dispatchEvent(new CustomEvent(\"remove\", {detail: {id: this._id}}));\r\n    }\r\n\r\n    getData() {\r\n        return {text: this._text, id: this._id, isCompleted: this._isCompleted};\r\n    }\r\n\r\n    \r\n\r\n}","export default (id, text, isCompleted) => {\r\n  return `\r\n      <li class=\"task\">\r\n          <input type=\"checkbox\" class=\"task__check\" id=\"${id}\" ${isCompleted ? \"checked\" : \"\"}/>\r\n          <label for=\"${id}\" class=\"task__toggle\"></label>\r\n          <span class=\"task__label\">${text}</span>\r\n          <div class=\"task__remove-btn\"></div>\r\n      </li>\r\n    `;\r\n}","import Task from '../task';\r\nimport Helpers from '../helpers'\r\nimport template from './template';\r\n\r\nexport default class TaskList {\r\n    constructor() { \r\n        this.init();\r\n        this.render();\r\n    }\r\n\r\n    get taskListElem() {\r\n        return  this._taskListElem;\r\n    }\r\n\r\n    init() {\r\n        let restoredTasks = JSON.parse(window.localStorage.getItem('tasks')) || [];\r\n        this.tasks = restoredTasks.map((taskData) =>  new Task(taskData));\r\n        this.filter = null;\r\n    }\r\n\r\n    render() {\r\n        this._taskListElem = Helpers.createElementFromHTML(template());\r\n        this.renderTasks(this.tasks);    \r\n    }\r\n\r\n    reRenderTasks() {\r\n        this._taskListElem.innerHTML = '';\r\n        const tasks = this.tasks.filter(task => task.isCompleted === this.filter || this.filter === null);\r\n        this.renderTasks(tasks);    \r\n    }\r\n\r\n    renderTasks(tasks) {\r\n        tasks.forEach((task) => {\r\n            this._taskListElem.appendChild(task.elem);\r\n            task.elem.addEventListener('completed', this.completeTask.bind(this));\r\n            task.elem.addEventListener('remove', this.removeTask.bind(this));\r\n        });\r\n    }\r\n\r\n    addTaskToList(text) {\r\n        if (!text) {\r\n            return;\r\n        }\r\n\r\n        const task = new Task({text});\r\n        this.tasks.push(task);\r\n        this.reRenderTasks();\r\n        this.saveTaskInLocalStorage();\r\n        this.taskListElem.dispatchEvent(new CustomEvent(\"completed\"));\r\n    }\r\n\r\n    getUncompletedCount() {\r\n        return this.tasks.filter(task => !task.isCompleted).length;\r\n    }\r\n\r\n    getAllTasks() {\r\n        return this.tasks;\r\n    }\r\n\r\n    completeTask() {\r\n        this. reRenderTasks();\r\n        this.saveTaskInLocalStorage();\r\n        this.taskListElem.dispatchEvent(new CustomEvent(\"completed\"));\r\n    }\r\n\r\n    removeTask(event) {\r\n        this.tasks = this.tasks.filter ((task) => task.id !== event.detail.id);\r\n        this.saveTaskInLocalStorage();\r\n        this.reRenderTasks();\r\n        this.taskListElem.dispatchEvent(new CustomEvent(\"completed\"));\r\n    }\r\n\r\n    setAllUncompleted() {\r\n        this.tasks.forEach(task => { task.isCompleted = false });\r\n        this.completeTask();\r\n    }\r\n\r\n    saveTaskInLocalStorage() {\r\n        window.localStorage.setItem(\"tasks\", JSON.stringify(this.tasks.map( task => task.getData())));\r\n    }\r\n\r\n}","export default () => {\r\n    return `<ul class=\"list\"> </ul> `;\r\n  }","import Helpers from '../helpers'\r\nimport template from './template';\r\n\r\nconst CLASSES = {\r\n    activeCount: '.uncompleted-count',\r\n    selected: 'filter--selected',\r\n    completed: 'filter--completed',\r\n    active: 'filter--active',\r\n    all: 'filter--all'\r\n}\r\n\r\nexport default class Menu {\r\n    constructor(taskList) { \r\n        this._taskList = taskList;\r\n        this.render();\r\n\r\n        this._taskList.taskListElem.addEventListener('completed', this.completedTasksChanged.bind(this));\r\n        this.elem.querySelectorAll('.filter button').forEach( buttonElem => buttonElem.addEventListener('click', this.filterTasks.bind(this)));\r\n        this.elem.querySelector('.actions__clear').addEventListener('click', this.clearCompleted.bind(this));\r\n    }\r\n\r\n    get elem() {\r\n        return this._elem;\r\n    }\r\n\r\n    render() {\r\n        this._elem = Helpers.createElementFromHTML(template(this._taskList.getUncompletedCount()));   \r\n    }\r\n\r\n    completedTasksChanged() {\r\n        this._elem.querySelector(CLASSES.activeCount).innerHTML = this._taskList.getUncompletedCount();\r\n    }\r\n\r\n    filterTasks(event) {\r\n        const button = event.target.closest('button');\r\n        if (button.classList.contains(CLASSES.selected)){\r\n            return;\r\n        }\r\n        this._taskList.filter = button.classList.contains(CLASSES.completed) ? true :\r\n                                    button.classList.contains(CLASSES.active) ? false : null;\r\n\r\n        this.elem.querySelectorAll('.filter button').forEach( buttonElem => buttonElem.classList.remove(CLASSES.selected));\r\n        event.target.closest('button').classList.add(CLASSES.selected);\r\n        this._taskList.reRenderTasks();\r\n    }\r\n\r\n    clearCompleted() {\r\n        this._taskList.setAllUncompleted();\r\n        this._taskList.reRenderTasks();\r\n    }\r\n\r\n    resetFilter() {\r\n        this.elem.querySelectorAll('.filter button').forEach( buttonElem => {\r\n            buttonElem.classList.remove(CLASSES.selected);\r\n            if (buttonElem.classList.contains(CLASSES.all)) {\r\n                buttonElem.classList.add(CLASSES.selected);\r\n            }\r\n        });\r\n    }\r\n}","export default (count) => {\r\n    return `\r\n    <div class=\"menu\">\r\n            <div class=\"menu__status\"><span><span class=\"uncompleted-count\">${count || 0}</span> items left</span></div>\r\n            <div class=\"menu__filters filter\">\r\n                <button  class=\"filter--all filter--selected\">All</button>\r\n                <button  class=\"filter--active\">Active</button>\r\n                <button  class=\"filter--completed\">Completed</button>\r\n            </div>\r\n\r\n            <div class=\"menu__actions action\">\r\n                <button  class=\"actions__clear\">Clear completed</button>\r\n            </div>\r\n        </div>\r\n    `;\r\n  }","import TaskList from './../task-list';\r\nimport Menu from './../menu';\r\n\r\nconst CLASSES = {\r\n    theme: 'light-theme'\r\n}\r\n\r\nexport default class Todos {\r\n    constructor(elem) { \r\n        this._elem = elem;\r\n\r\n        this._listWrapperElem = document.querySelector('.list-wrapper');\r\n        this._listNewTaskElem = document.querySelector('.new-task');\r\n        this._changeThemeElem = document.querySelector('.header__theme-btn');\r\n\r\n        this._listNewTaskElem.addEventListener('keyup', this.newTaskOnInput.bind(this));\r\n        this._listNewTaskElem.addEventListener('blur', this.newTaskOnInput.bind(this));\r\n        this._changeThemeElem.addEventListener('click', this.changeThemeOnClick.bind(this));\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this._taskList = new TaskList();\r\n        this._listWrapperElem.appendChild(this._taskList.taskListElem);\r\n        this._menu = new Menu(this._taskList);\r\n        this._listWrapperElem.appendChild(this._menu.elem);\r\n    }\r\n\r\n    newTaskOnInput(event) {\r\n        if ((event.keyCode && event.keyCode === 13)) {\r\n            event.target.blur();       \r\n        } else {\r\n            let text = event.target.value;\r\n            event.target.value = \"\";\r\n            this._taskList.addTaskToList(text);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    changeThemeOnClick() {\r\n        document.body.classList.toggle(CLASSES.theme);\r\n    }\r\n\r\n}","import \"./styles.scss\";\nimport Todos from './todos';\n\nlet todosElem = document.querySelector('.todos');\n\nlet todos = new Todos(todosElem);"],"sourceRoot":""}